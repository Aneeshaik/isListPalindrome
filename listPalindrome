 public Node reverseList(Node head){
            Node prevNode = null;
            Node curNode = head;
            while(curNode != null){
                Node nextNode = curNode.next;
                curNode.next = prevNode;
                prevNode = curNode;
                curNode = nextNode;
            }
            return prevNode;
        }
        public Node midList(Node head){
            Node hare = head;
            Node turtle = head;
            while(hare != null && hare.next != null){
                hare = hare.next.next;
                turtle = turtle.next;
            }
            return turtle;
        }
        public boolean isPalindrome(Node head){
            if(head == null  || head.next == null){
                return true;
            }
            Node middle = midList(head);
            Node secondHalf = reverseList(middle.next);
            Node firstHalf = head;
            while(secondHalf != null) {
                if (firstHalf.data != secondHalf.data) {
                    return false;
                }
                firstHalf = firstHalf.next;
                secondHalf = secondHalf.next;
            }
            return true;
        }
        System.out.println(list.isPalindrome(list.head));
